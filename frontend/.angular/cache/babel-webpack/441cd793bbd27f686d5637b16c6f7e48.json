{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\n\nclass ClipboardService {\n  constructor(ngZone, document, window) {\n    this.ngZone = ngZone;\n    this.document = document;\n    this.window = window;\n    this.copySubject = new Subject();\n    this.copyResponse$ = this.copySubject.asObservable();\n    this.config = {};\n  }\n\n  configure(config) {\n    this.config = config;\n  }\n\n  copy(content) {\n    if (!this.isSupported || !content) {\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content\n      });\n    }\n\n    const copyResult = this.copyFromContent(content);\n\n    if (copyResult) {\n      return this.pushCopyResponse({\n        content,\n        isSuccess: copyResult\n      });\n    }\n\n    return this.pushCopyResponse({\n      isSuccess: false,\n      content\n    });\n  }\n\n  get isSupported() {\n    return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n  }\n\n  isTargetValid(element) {\n    if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n      if (element.hasAttribute('disabled')) {\n        throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n      }\n\n      return true;\n    }\n\n    throw new Error('Target should be input or textarea');\n  }\n  /**\n   * Attempts to copy from an input `targetElm`\n   */\n\n\n  copyFromInputElement(targetElm, isFocus = true) {\n    try {\n      this.selectTarget(targetElm);\n      const re = this.copyText();\n      this.clearSelection(isFocus ? targetElm : undefined, this.window);\n      return re && this.isCopySuccessInIE11();\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * This is a hack for IE11 to return `true` even if copy fails.\n   */\n\n\n  isCopySuccessInIE11() {\n    const clipboardData = this.window['clipboardData'];\n\n    if (clipboardData && clipboardData.getData) {\n      if (!clipboardData.getData('Text')) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n\n\n  copyFromContent(content, container = this.document.body) {\n    // check if the temp textarea still belongs to the current container.\n    // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n    if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n\n    if (!this.tempTextArea) {\n      this.tempTextArea = this.createTempTextArea(this.document, this.window);\n\n      try {\n        container.appendChild(this.tempTextArea);\n      } catch (error) {\n        throw new Error('Container should be a Dom element');\n      }\n    }\n\n    this.tempTextArea.value = content;\n    const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n\n    if (this.config.cleanUpAfterCopy) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n\n    return toReturn;\n  }\n  /**\n   * Remove temporary textarea if any exists.\n   */\n\n\n  destroy(container = this.document.body) {\n    if (this.tempTextArea) {\n      container.removeChild(this.tempTextArea); // removeChild doesn't remove the reference from memory\n\n      this.tempTextArea = undefined;\n    }\n  }\n  /**\n   * Select the target html input element.\n   */\n\n\n  selectTarget(inputElement) {\n    inputElement.select();\n    inputElement.setSelectionRange(0, inputElement.value.length);\n    return inputElement.value.length;\n  }\n\n  copyText() {\n    return this.document.execCommand('copy');\n  }\n  /**\n   * Moves focus away from `target` and back to the trigger, removes current selection.\n   */\n\n\n  clearSelection(inputElement, window) {\n    inputElement && inputElement.focus();\n    window.getSelection()?.removeAllRanges();\n  }\n  /**\n   * Creates a fake textarea for copy command.\n   */\n\n\n  createTempTextArea(doc, window) {\n    const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n    let ta;\n    ta = doc.createElement('textarea'); // Prevent zooming on iOS\n\n    ta.style.fontSize = '12pt'; // Reset box model\n\n    ta.style.border = '0';\n    ta.style.padding = '0';\n    ta.style.margin = '0'; // Move element out of screen horizontally\n\n    ta.style.position = 'absolute';\n    ta.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically\n\n    const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n    ta.style.top = yPosition + 'px';\n    ta.setAttribute('readonly', '');\n    return ta;\n  }\n  /**\n   * Pushes copy operation response to copySubject, to provide global access\n   * to the response.\n   */\n\n\n  pushCopyResponse(response) {\n    if (this.copySubject.observers.length > 0) {\n      this.ngZone.run(() => {\n        this.copySubject.next(response);\n      });\n    }\n  }\n  /**\n   * @deprecated use pushCopyResponse instead.\n   */\n\n\n  pushCopyReponse(response) {\n    this.pushCopyResponse(response);\n  }\n\n}\n\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(WINDOW, 8));\n};\n\nClipboardService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ClipboardService,\n  factory: ClipboardService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\n\nclass ClipboardDirective {\n  constructor(ngZone, host, renderer, clipboardSrv) {\n    this.ngZone = ngZone;\n    this.host = host;\n    this.renderer = renderer;\n    this.clipboardSrv = clipboardSrv;\n    this.cbOnSuccess = new EventEmitter();\n    this.cbOnError = new EventEmitter();\n\n    this.onClick = event => {\n      if (!this.clipboardSrv.isSupported) {\n        this.handleResult(false, undefined, event);\n      } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n        this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n      } else if (this.cbContent) {\n        this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n      }\n    };\n  } // eslint-disable-next-line no-empty, @typescript-eslint/no-empty-function\n\n\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      // By default each host listener schedules change detection and also wrapped\n      // into additional function that calls `markForCheck()`. We're listening the `click`\n      // event in the context of the root zone to avoid running unnecessary change detections,\n      // since this directive doesn't do anything template-related (e.g. updates template variables).\n      this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.clickListener) {\n      this.clickListener();\n    }\n\n    this.clipboardSrv.destroy(this.container);\n  }\n  /**\n   * Fires an event based on the copy operation result.\n   * @param succeeded\n   */\n\n\n  handleResult(succeeded, copiedContent, event) {\n    let response = {\n      isSuccess: succeeded,\n      event\n    };\n\n    if (succeeded) {\n      if (this.cbOnSuccess.observers.length > 0) {\n        response = Object.assign(response, {\n          content: copiedContent,\n          successMessage: this.cbSuccessMsg\n        });\n        this.ngZone.run(() => {\n          this.cbOnSuccess.emit(response);\n        });\n      }\n    } else {\n      if (this.cbOnError.observers.length > 0) {\n        this.ngZone.run(() => {\n          this.cbOnError.emit(response);\n        });\n      }\n    }\n\n    this.clipboardSrv.pushCopyResponse(response);\n  }\n\n}\n\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ClipboardService));\n};\n\nClipboardDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"ngxClipboard\", \"\"]],\n  inputs: {\n    targetElm: [\"ngxClipboard\", \"targetElm\"],\n    container: \"container\",\n    cbContent: \"cbContent\",\n    cbSuccessMsg: \"cbSuccessMsg\"\n  },\n  outputs: {\n    cbOnSuccess: \"cbOnSuccess\",\n    cbOnError: \"cbOnError\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboard]'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: ClipboardService\n    }];\n  }, {\n    targetElm: [{\n      type: Input,\n      args: ['ngxClipboard']\n    }],\n    container: [{\n      type: Input\n    }],\n    cbContent: [{\n      type: Input\n    }],\n    cbSuccessMsg: [{\n      type: Input\n    }],\n    cbOnSuccess: [{\n      type: Output\n    }],\n    cbOnError: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ClipboardIfSupportedDirective {\n  constructor(_clipboardService, _viewContainerRef, _templateRef) {\n    this._clipboardService = _clipboardService;\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n\n  ngOnInit() {\n    if (this._clipboardService.isSupported) {\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n  }\n\n}\n\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n  return new (t || ClipboardIfSupportedDirective)(i0.ɵɵdirectiveInject(ClipboardService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nClipboardIfSupportedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ClipboardIfSupportedDirective,\n  selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboardIfSupported]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass ClipboardModule {}\n\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\n\nClipboardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n      exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-clipboard\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };","map":{"version":3,"sources":["X:/Development/Java/mmmklcobht/frontend/node_modules/ngx-clipboard/fesm2020/ngx-clipboard.mjs"],"names":["DOCUMENT","CommonModule","i0","Injectable","Inject","Optional","EventEmitter","Directive","Input","Output","NgModule","WINDOW","Subject","ClipboardService","constructor","ngZone","document","window","copySubject","copyResponse$","asObservable","config","configure","copy","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","observers","run","next","pushCopyReponse","ɵfac","NgZone","ɵprov","type","args","providedIn","decorators","ClipboardDirective","host","renderer","clipboardSrv","cbOnSuccess","cbOnError","onClick","event","handleResult","cbContent","ngOnInit","runOutsideAngular","clickListener","listen","nativeElement","ngOnDestroy","succeeded","copiedContent","Object","assign","successMessage","cbSuccessMsg","emit","ElementRef","Renderer2","ɵdir","selector","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ViewContainerRef","TemplateRef","ClipboardModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,iBAAvC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,YAAvC,EAAqDC,SAArD,EAAgEC,KAAhE,EAAuEC,MAAvE,EAA+EC,QAA/E,QAA+F,eAA/F;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA;AACA;AACA;;AACA,MAAMC,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,MAAnB,EAA2B;AAClC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAmB,IAAIN,OAAJ,EAAnB;AACA,SAAKO,aAAL,GAAqB,KAAKD,WAAL,CAAiBE,YAAjB,EAArB;AACA,SAAKC,MAAL,GAAc,EAAd;AACH;;AACDC,EAAAA,SAAS,CAACD,MAAD,EAAS;AACd,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDE,EAAAA,IAAI,CAACC,OAAD,EAAU;AACV,QAAI,CAAC,KAAKC,WAAN,IAAqB,CAACD,OAA1B,EAAmC;AAC/B,aAAO,KAAKE,gBAAL,CAAsB;AAAEC,QAAAA,SAAS,EAAE,KAAb;AAAoBH,QAAAA;AAApB,OAAtB,CAAP;AACH;;AACD,UAAMI,UAAU,GAAG,KAAKC,eAAL,CAAqBL,OAArB,CAAnB;;AACA,QAAII,UAAJ,EAAgB;AACZ,aAAO,KAAKF,gBAAL,CAAsB;AAAEF,QAAAA,OAAF;AAAWG,QAAAA,SAAS,EAAEC;AAAtB,OAAtB,CAAP;AACH;;AACD,WAAO,KAAKF,gBAAL,CAAsB;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBH,MAAAA;AAApB,KAAtB,CAAP;AACH;;AACc,MAAXC,WAAW,GAAG;AACd,WAAO,CAAC,CAAC,KAAKT,QAAL,CAAcc,qBAAhB,IAAyC,CAAC,CAAC,KAAKd,QAAL,CAAcc,qBAAd,CAAoC,MAApC,CAA3C,IAA0F,CAAC,CAAC,KAAKb,MAAxG;AACH;;AACDc,EAAAA,aAAa,CAACC,OAAD,EAAU;AACnB,QAAIA,OAAO,YAAYC,gBAAnB,IAAuCD,OAAO,YAAYE,mBAA9D,EAAmF;AAC/E,UAAIF,OAAO,CAACG,YAAR,CAAqB,UAArB,CAAJ,EAAsC;AAClC,cAAM,IAAIC,KAAJ,CAAU,mFAAV,CAAN;AACH;;AACD,aAAO,IAAP;AACH;;AACD,UAAM,IAAIA,KAAJ,CAAU,oCAAV,CAAN;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,oBAAoB,CAACC,SAAD,EAAYC,OAAO,GAAG,IAAtB,EAA4B;AAC5C,QAAI;AACA,WAAKC,YAAL,CAAkBF,SAAlB;AACA,YAAMG,EAAE,GAAG,KAAKC,QAAL,EAAX;AACA,WAAKC,cAAL,CAAoBJ,OAAO,GAAGD,SAAH,GAAeM,SAA1C,EAAqD,KAAK3B,MAA1D;AACA,aAAOwB,EAAE,IAAI,KAAKI,mBAAL,EAAb;AACH,KALD,CAMA,OAAOC,KAAP,EAAc;AACV,aAAO,KAAP;AACH;AACJ;AACD;AACJ;AACA;;;AACID,EAAAA,mBAAmB,GAAG;AAClB,UAAME,aAAa,GAAG,KAAK9B,MAAL,CAAY,eAAZ,CAAtB;;AACA,QAAI8B,aAAa,IAAIA,aAAa,CAACC,OAAnC,EAA4C;AACxC,UAAI,CAACD,aAAa,CAACC,OAAd,CAAsB,MAAtB,CAAL,EAAoC;AAChC,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACInB,EAAAA,eAAe,CAACL,OAAD,EAAUyB,SAAS,GAAG,KAAKjC,QAAL,CAAckC,IAApC,EAA0C;AACrD;AACA;AACA,QAAI,KAAKC,YAAL,IAAqB,CAACF,SAAS,CAACG,QAAV,CAAmB,KAAKD,YAAxB,CAA1B,EAAiE;AAC7D,WAAKE,OAAL,CAAa,KAAKF,YAAL,CAAkBG,aAAlB,IAAmCV,SAAhD;AACH;;AACD,QAAI,CAAC,KAAKO,YAAV,EAAwB;AACpB,WAAKA,YAAL,GAAoB,KAAKI,kBAAL,CAAwB,KAAKvC,QAA7B,EAAuC,KAAKC,MAA5C,CAApB;;AACA,UAAI;AACAgC,QAAAA,SAAS,CAACO,WAAV,CAAsB,KAAKL,YAA3B;AACH,OAFD,CAGA,OAAOL,KAAP,EAAc;AACV,cAAM,IAAIV,KAAJ,CAAU,mCAAV,CAAN;AACH;AACJ;;AACD,SAAKe,YAAL,CAAkBM,KAAlB,GAA0BjC,OAA1B;AACA,UAAMkC,QAAQ,GAAG,KAAKrB,oBAAL,CAA0B,KAAKc,YAA/B,EAA6C,KAA7C,CAAjB;;AACA,QAAI,KAAK9B,MAAL,CAAYsC,gBAAhB,EAAkC;AAC9B,WAAKN,OAAL,CAAa,KAAKF,YAAL,CAAkBG,aAAlB,IAAmCV,SAAhD;AACH;;AACD,WAAOc,QAAP;AACH;AACD;AACJ;AACA;;;AACIL,EAAAA,OAAO,CAACJ,SAAS,GAAG,KAAKjC,QAAL,CAAckC,IAA3B,EAAiC;AACpC,QAAI,KAAKC,YAAT,EAAuB;AACnBF,MAAAA,SAAS,CAACW,WAAV,CAAsB,KAAKT,YAA3B,EADmB,CAEnB;;AACA,WAAKA,YAAL,GAAoBP,SAApB;AACH;AACJ;AACD;AACJ;AACA;;;AACIJ,EAAAA,YAAY,CAACqB,YAAD,EAAe;AACvBA,IAAAA,YAAY,CAACC,MAAb;AACAD,IAAAA,YAAY,CAACE,iBAAb,CAA+B,CAA/B,EAAkCF,YAAY,CAACJ,KAAb,CAAmBO,MAArD;AACA,WAAOH,YAAY,CAACJ,KAAb,CAAmBO,MAA1B;AACH;;AACDtB,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAK1B,QAAL,CAAciD,WAAd,CAA0B,MAA1B,CAAP;AACH;AACD;AACJ;AACA;;;AACItB,EAAAA,cAAc,CAACkB,YAAD,EAAe5C,MAAf,EAAuB;AACjC4C,IAAAA,YAAY,IAAIA,YAAY,CAACK,KAAb,EAAhB;AACAjD,IAAAA,MAAM,CAACkD,YAAP,IAAuBC,eAAvB;AACH;AACD;AACJ;AACA;;;AACIb,EAAAA,kBAAkB,CAACc,GAAD,EAAMpD,MAAN,EAAc;AAC5B,UAAMqD,KAAK,GAAGD,GAAG,CAACE,eAAJ,CAAoBC,YAApB,CAAiC,KAAjC,MAA4C,KAA1D;AACA,QAAIC,EAAJ;AACAA,IAAAA,EAAE,GAAGJ,GAAG,CAACK,aAAJ,CAAkB,UAAlB,CAAL,CAH4B,CAI5B;;AACAD,IAAAA,EAAE,CAACE,KAAH,CAASC,QAAT,GAAoB,MAApB,CAL4B,CAM5B;;AACAH,IAAAA,EAAE,CAACE,KAAH,CAASE,MAAT,GAAkB,GAAlB;AACAJ,IAAAA,EAAE,CAACE,KAAH,CAASG,OAAT,GAAmB,GAAnB;AACAL,IAAAA,EAAE,CAACE,KAAH,CAASI,MAAT,GAAkB,GAAlB,CAT4B,CAU5B;;AACAN,IAAAA,EAAE,CAACE,KAAH,CAASK,QAAT,GAAoB,UAApB;AACAP,IAAAA,EAAE,CAACE,KAAH,CAASL,KAAK,GAAG,OAAH,GAAa,MAA3B,IAAqC,SAArC,CAZ4B,CAa5B;;AACA,UAAMW,SAAS,GAAGhE,MAAM,CAACiE,WAAP,IAAsBb,GAAG,CAACE,eAAJ,CAAoBY,SAA5D;AACAV,IAAAA,EAAE,CAACE,KAAH,CAASS,GAAT,GAAeH,SAAS,GAAG,IAA3B;AACAR,IAAAA,EAAE,CAACY,YAAH,CAAgB,UAAhB,EAA4B,EAA5B;AACA,WAAOZ,EAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI/C,EAAAA,gBAAgB,CAAC4D,QAAD,EAAW;AACvB,QAAI,KAAKpE,WAAL,CAAiBqE,SAAjB,CAA2BvB,MAA3B,GAAoC,CAAxC,EAA2C;AACvC,WAAKjD,MAAL,CAAYyE,GAAZ,CAAgB,MAAM;AAClB,aAAKtE,WAAL,CAAiBuE,IAAjB,CAAsBH,QAAtB;AACH,OAFD;AAGH;AACJ;AACD;AACJ;AACA;;;AACII,EAAAA,eAAe,CAACJ,QAAD,EAAW;AACtB,SAAK5D,gBAAL,CAAsB4D,QAAtB;AACH;;AAxJkB;;AA0JvBzE,gBAAgB,CAAC8E,IAAjB;AAAA,mBAA6G9E,gBAA7G,EAAmGX,EAAnG,UAA+IA,EAAE,CAAC0F,MAAlJ,GAAmG1F,EAAnG,UAAqKF,QAArK,GAAmGE,EAAnG,UAA0LS,MAA1L;AAAA;;AACAE,gBAAgB,CAACgF,KAAjB,kBADmG3F,EACnG;AAAA,SAAiHW,gBAAjH;AAAA,WAAiHA,gBAAjH;AAAA,cAA+I;AAA/I;;AACA;AAAA,qDAFmGX,EAEnG,mBAA2FW,gBAA3F,EAAyH,CAAC;AAC9GiF,IAAAA,IAAI,EAAE3F,UADwG;AAE9G4F,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAD;AAFwG,GAAD,CAAzH,EAG4B,YAAY;AAAE,WAAO,CAAC;AAAEF,MAAAA,IAAI,EAAE5F,EAAE,CAAC0F;AAAX,KAAD,EAAsB;AAAEE,MAAAA,IAAI,EAAElD,SAAR;AAAmBqD,MAAAA,UAAU,EAAE,CAAC;AACnFH,QAAAA,IAAI,EAAE1F,MAD6E;AAEnF2F,QAAAA,IAAI,EAAE,CAAC/F,QAAD;AAF6E,OAAD;AAA/B,KAAtB,EAG3B;AAAE8F,MAAAA,IAAI,EAAElD,SAAR;AAAmBqD,MAAAA,UAAU,EAAE,CAAC;AAClCH,QAAAA,IAAI,EAAEzF;AAD4B,OAAD,EAElC;AACCyF,QAAAA,IAAI,EAAE1F,MADP;AAEC2F,QAAAA,IAAI,EAAE,CAACpF,MAAD;AAFP,OAFkC;AAA/B,KAH2B,CAAP;AAQlB,GAXxB;AAAA;;AAaA,MAAMuF,kBAAN,CAAyB;AACrBpF,EAAAA,WAAW,CAACC,MAAD,EAASoF,IAAT,EAAeC,QAAf,EAAyBC,YAAzB,EAAuC;AAC9C,SAAKtF,MAAL,GAAcA,MAAd;AACA,SAAKoF,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,WAAL,GAAmB,IAAIhG,YAAJ,EAAnB;AACA,SAAKiG,SAAL,GAAiB,IAAIjG,YAAJ,EAAjB;;AACA,SAAKkG,OAAL,GAAgBC,KAAD,IAAW;AACtB,UAAI,CAAC,KAAKJ,YAAL,CAAkB5E,WAAvB,EAAoC;AAChC,aAAKiF,YAAL,CAAkB,KAAlB,EAAyB9D,SAAzB,EAAoC6D,KAApC;AACH,OAFD,MAGK,IAAI,KAAKnE,SAAL,IAAkB,KAAK+D,YAAL,CAAkBtE,aAAlB,CAAgC,KAAKO,SAArC,CAAtB,EAAuE;AACxE,aAAKoE,YAAL,CAAkB,KAAKL,YAAL,CAAkBhE,oBAAlB,CAAuC,KAAKC,SAA5C,CAAlB,EAA0E,KAAKA,SAAL,CAAemB,KAAzF,EAAgGgD,KAAhG;AACH,OAFI,MAGA,IAAI,KAAKE,SAAT,EAAoB;AACrB,aAAKD,YAAL,CAAkB,KAAKL,YAAL,CAAkBxE,eAAlB,CAAkC,KAAK8E,SAAvC,EAAkD,KAAK1D,SAAvD,CAAlB,EAAqF,KAAK0D,SAA1F,EAAqGF,KAArG;AACH;AACJ,KAVD;AAWH,GAnBoB,CAoBrB;;;AACAG,EAAAA,QAAQ,GAAG;AACP,SAAK7F,MAAL,CAAY8F,iBAAZ,CAA8B,MAAM;AAChC;AACA;AACA;AACA;AACA,WAAKC,aAAL,GAAqB,KAAKV,QAAL,CAAcW,MAAd,CAAqB,KAAKZ,IAAL,CAAUa,aAA/B,EAA8C,OAA9C,EAAuD,KAAKR,OAA5D,CAArB;AACH,KAND;AAOH;;AACDS,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKH,aAAT,EAAwB;AACpB,WAAKA,aAAL;AACH;;AACD,SAAKT,YAAL,CAAkBhD,OAAlB,CAA0B,KAAKJ,SAA/B;AACH;AACD;AACJ;AACA;AACA;;;AACIyD,EAAAA,YAAY,CAACQ,SAAD,EAAYC,aAAZ,EAA2BV,KAA3B,EAAkC;AAC1C,QAAInB,QAAQ,GAAG;AACX3D,MAAAA,SAAS,EAAEuF,SADA;AAEXT,MAAAA;AAFW,KAAf;;AAIA,QAAIS,SAAJ,EAAe;AACX,UAAI,KAAKZ,WAAL,CAAiBf,SAAjB,CAA2BvB,MAA3B,GAAoC,CAAxC,EAA2C;AACvCsB,QAAAA,QAAQ,GAAG8B,MAAM,CAACC,MAAP,CAAc/B,QAAd,EAAwB;AAC/B9D,UAAAA,OAAO,EAAE2F,aADsB;AAE/BG,UAAAA,cAAc,EAAE,KAAKC;AAFU,SAAxB,CAAX;AAIA,aAAKxG,MAAL,CAAYyE,GAAZ,CAAgB,MAAM;AAClB,eAAKc,WAAL,CAAiBkB,IAAjB,CAAsBlC,QAAtB;AACH,SAFD;AAGH;AACJ,KAVD,MAWK;AACD,UAAI,KAAKiB,SAAL,CAAehB,SAAf,CAAyBvB,MAAzB,GAAkC,CAAtC,EAAyC;AACrC,aAAKjD,MAAL,CAAYyE,GAAZ,CAAgB,MAAM;AAClB,eAAKe,SAAL,CAAeiB,IAAf,CAAoBlC,QAApB;AACH,SAFD;AAGH;AACJ;;AACD,SAAKe,YAAL,CAAkB3E,gBAAlB,CAAmC4D,QAAnC;AACH;;AAhEoB;;AAkEzBY,kBAAkB,CAACP,IAAnB;AAAA,mBAA+GO,kBAA/G,EAjFmGhG,EAiFnG,mBAAmJA,EAAE,CAAC0F,MAAtJ,GAjFmG1F,EAiFnG,mBAAyKA,EAAE,CAACuH,UAA5K,GAjFmGvH,EAiFnG,mBAAmMA,EAAE,CAACwH,SAAtM,GAjFmGxH,EAiFnG,mBAA4NW,gBAA5N;AAAA;;AACAqF,kBAAkB,CAACyB,IAAnB,kBAlFmGzH,EAkFnG;AAAA,QAAmGgG,kBAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAnFmGhG,EAmFnG,mBAA2FgG,kBAA3F,EAA2H,CAAC;AAChHJ,IAAAA,IAAI,EAAEvF,SAD0G;AAEhHwF,IAAAA,IAAI,EAAE,CAAC;AAAE6B,MAAAA,QAAQ,EAAE;AAAZ,KAAD;AAF0G,GAAD,CAA3H,EAG4B,YAAY;AAAE,WAAO,CAAC;AAAE9B,MAAAA,IAAI,EAAE5F,EAAE,CAAC0F;AAAX,KAAD,EAAsB;AAAEE,MAAAA,IAAI,EAAE5F,EAAE,CAACuH;AAAX,KAAtB,EAA+C;AAAE3B,MAAAA,IAAI,EAAE5F,EAAE,CAACwH;AAAX,KAA/C,EAAuE;AAAE5B,MAAAA,IAAI,EAAEjF;AAAR,KAAvE,CAAP;AAA4G,GAHtJ,EAGwK;AAAEyB,IAAAA,SAAS,EAAE,CAAC;AACtKwD,MAAAA,IAAI,EAAEtF,KADgK;AAEtKuF,MAAAA,IAAI,EAAE,CAAC,cAAD;AAFgK,KAAD,CAAb;AAGxJ9C,IAAAA,SAAS,EAAE,CAAC;AACZ6C,MAAAA,IAAI,EAAEtF;AADM,KAAD,CAH6I;AAKxJmG,IAAAA,SAAS,EAAE,CAAC;AACZb,MAAAA,IAAI,EAAEtF;AADM,KAAD,CAL6I;AAOxJ+G,IAAAA,YAAY,EAAE,CAAC;AACfzB,MAAAA,IAAI,EAAEtF;AADS,KAAD,CAP0I;AASxJ8F,IAAAA,WAAW,EAAE,CAAC;AACdR,MAAAA,IAAI,EAAErF;AADQ,KAAD,CAT2I;AAWxJ8F,IAAAA,SAAS,EAAE,CAAC;AACZT,MAAAA,IAAI,EAAErF;AADM,KAAD;AAX6I,GAHxK;AAAA;;AAkBA,MAAMoH,6BAAN,CAAoC;AAChC/G,EAAAA,WAAW,CAACgH,iBAAD,EAAoBC,iBAApB,EAAuCC,YAAvC,EAAqD;AAC5D,SAAKF,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACH;;AACDpB,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKkB,iBAAL,CAAuBrG,WAA3B,EAAwC;AACpC,WAAKsG,iBAAL,CAAuBE,kBAAvB,CAA0C,KAAKD,YAA/C;AACH;AACJ;;AAV+B;;AAYpCH,6BAA6B,CAAClC,IAA9B;AAAA,mBAA0HkC,6BAA1H,EAjHmG3H,EAiHnG,mBAAyKW,gBAAzK,GAjHmGX,EAiHnG,mBAAsMA,EAAE,CAACgI,gBAAzM,GAjHmGhI,EAiHnG,mBAAsOA,EAAE,CAACiI,WAAzO;AAAA;;AACAN,6BAA6B,CAACF,IAA9B,kBAlHmGzH,EAkHnG;AAAA,QAA8G2H,6BAA9G;AAAA;AAAA;;AACA;AAAA,qDAnHmG3H,EAmHnG,mBAA2F2H,6BAA3F,EAAsI,CAAC;AAC3H/B,IAAAA,IAAI,EAAEvF,SADqH;AAE3HwF,IAAAA,IAAI,EAAE,CAAC;AACC6B,MAAAA,QAAQ,EAAE;AADX,KAAD;AAFqH,GAAD,CAAtI,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAE9B,MAAAA,IAAI,EAAEjF;AAAR,KAAD,EAA6B;AAAEiF,MAAAA,IAAI,EAAE5F,EAAE,CAACgI;AAAX,KAA7B,EAA4D;AAAEpC,MAAAA,IAAI,EAAE5F,EAAE,CAACiI;AAAX,KAA5D,CAAP;AAA+F,GALzI;AAAA;;AAOA,MAAMC,eAAN,CAAsB;;AAEtBA,eAAe,CAACzC,IAAhB;AAAA,mBAA4GyC,eAA5G;AAAA;;AACAA,eAAe,CAACC,IAAhB,kBA7HmGnI,EA6HnG;AAAA,QAA6GkI;AAA7G;AACAA,eAAe,CAACE,IAAhB,kBA9HmGpI,EA8HnG;AAAA,YAAwI,CAACD,YAAD,CAAxI;AAAA;;AACA;AAAA,qDA/HmGC,EA+HnG,mBAA2FkI,eAA3F,EAAwH,CAAC;AAC7GtC,IAAAA,IAAI,EAAEpF,QADuG;AAE7GqF,IAAAA,IAAI,EAAE,CAAC;AACCwC,MAAAA,OAAO,EAAE,CAACtI,YAAD,CADV;AAECuI,MAAAA,YAAY,EAAE,CAACtC,kBAAD,EAAqB2B,6BAArB,CAFf;AAGCY,MAAAA,OAAO,EAAE,CAACvC,kBAAD,EAAqB2B,6BAArB;AAHV,KAAD;AAFuG,GAAD,CAAxH;AAAA;AASA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS3B,kBAAT,EAA6B2B,6BAA7B,EAA4DO,eAA5D,EAA6EvH,gBAA7E","sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\nclass ClipboardService {\n    constructor(ngZone, document, window) {\n        this.ngZone = ngZone;\n        this.document = document;\n        this.window = window;\n        this.copySubject = new Subject();\n        this.copyResponse$ = this.copySubject.asObservable();\n        this.config = {};\n    }\n    configure(config) {\n        this.config = config;\n    }\n    copy(content) {\n        if (!this.isSupported || !content) {\n            return this.pushCopyResponse({ isSuccess: false, content });\n        }\n        const copyResult = this.copyFromContent(content);\n        if (copyResult) {\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\n        }\n        return this.pushCopyResponse({ isSuccess: false, content });\n    }\n    get isSupported() {\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n    isTargetValid(element) {\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n            if (element.hasAttribute('disabled')) {\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n            }\n            return true;\n        }\n        throw new Error('Target should be input or textarea');\n    }\n    /**\n     * Attempts to copy from an input `targetElm`\n     */\n    copyFromInputElement(targetElm, isFocus = true) {\n        try {\n            this.selectTarget(targetElm);\n            const re = this.copyText();\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\n            return re && this.isCopySuccessInIE11();\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    /**\n     * This is a hack for IE11 to return `true` even if copy fails.\n     */\n    isCopySuccessInIE11() {\n        const clipboardData = this.window['clipboardData'];\n        if (clipboardData && clipboardData.getData) {\n            if (!clipboardData.getData('Text')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    copyFromContent(content, container = this.document.body) {\n        // check if the temp textarea still belongs to the current container.\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        if (!this.tempTextArea) {\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\n            try {\n                container.appendChild(this.tempTextArea);\n            }\n            catch (error) {\n                throw new Error('Container should be a Dom element');\n            }\n        }\n        this.tempTextArea.value = content;\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n        if (this.config.cleanUpAfterCopy) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        return toReturn;\n    }\n    /**\n     * Remove temporary textarea if any exists.\n     */\n    destroy(container = this.document.body) {\n        if (this.tempTextArea) {\n            container.removeChild(this.tempTextArea);\n            // removeChild doesn't remove the reference from memory\n            this.tempTextArea = undefined;\n        }\n    }\n    /**\n     * Select the target html input element.\n     */\n    selectTarget(inputElement) {\n        inputElement.select();\n        inputElement.setSelectionRange(0, inputElement.value.length);\n        return inputElement.value.length;\n    }\n    copyText() {\n        return this.document.execCommand('copy');\n    }\n    /**\n     * Moves focus away from `target` and back to the trigger, removes current selection.\n     */\n    clearSelection(inputElement, window) {\n        inputElement && inputElement.focus();\n        window.getSelection()?.removeAllRanges();\n    }\n    /**\n     * Creates a fake textarea for copy command.\n     */\n    createTempTextArea(doc, window) {\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n        let ta;\n        ta = doc.createElement('textarea');\n        // Prevent zooming on iOS\n        ta.style.fontSize = '12pt';\n        // Reset box model\n        ta.style.border = '0';\n        ta.style.padding = '0';\n        ta.style.margin = '0';\n        // Move element out of screen horizontally\n        ta.style.position = 'absolute';\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n        ta.style.top = yPosition + 'px';\n        ta.setAttribute('readonly', '');\n        return ta;\n    }\n    /**\n     * Pushes copy operation response to copySubject, to provide global access\n     * to the response.\n     */\n    pushCopyResponse(response) {\n        if (this.copySubject.observers.length > 0) {\n            this.ngZone.run(() => {\n                this.copySubject.next(response);\n            });\n        }\n    }\n    /**\n     * @deprecated use pushCopyResponse instead.\n     */\n    pushCopyReponse(response) {\n        this.pushCopyResponse(response);\n    }\n}\nClipboardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardService, deps: [{ token: i0.NgZone }, { token: DOCUMENT }, { token: WINDOW, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [WINDOW]\n                }] }]; } });\n\nclass ClipboardDirective {\n    constructor(ngZone, host, renderer, clipboardSrv) {\n        this.ngZone = ngZone;\n        this.host = host;\n        this.renderer = renderer;\n        this.clipboardSrv = clipboardSrv;\n        this.cbOnSuccess = new EventEmitter();\n        this.cbOnError = new EventEmitter();\n        this.onClick = (event) => {\n            if (!this.clipboardSrv.isSupported) {\n                this.handleResult(false, undefined, event);\n            }\n            else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n                this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n            }\n            else if (this.cbContent) {\n                this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n            }\n        };\n    }\n    // eslint-disable-next-line no-empty, @typescript-eslint/no-empty-function\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            // By default each host listener schedules change detection and also wrapped\n            // into additional function that calls `markForCheck()`. We're listening the `click`\n            // event in the context of the root zone to avoid running unnecessary change detections,\n            // since this directive doesn't do anything template-related (e.g. updates template variables).\n            this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n        });\n    }\n    ngOnDestroy() {\n        if (this.clickListener) {\n            this.clickListener();\n        }\n        this.clipboardSrv.destroy(this.container);\n    }\n    /**\n     * Fires an event based on the copy operation result.\n     * @param succeeded\n     */\n    handleResult(succeeded, copiedContent, event) {\n        let response = {\n            isSuccess: succeeded,\n            event\n        };\n        if (succeeded) {\n            if (this.cbOnSuccess.observers.length > 0) {\n                response = Object.assign(response, {\n                    content: copiedContent,\n                    successMessage: this.cbSuccessMsg\n                });\n                this.ngZone.run(() => {\n                    this.cbOnSuccess.emit(response);\n                });\n            }\n        }\n        else {\n            if (this.cbOnError.observers.length > 0) {\n                this.ngZone.run(() => {\n                    this.cbOnError.emit(response);\n                });\n            }\n        }\n        this.clipboardSrv.pushCopyResponse(response);\n    }\n}\nClipboardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: ClipboardService }], target: i0.ɵɵFactoryTarget.Directive });\nClipboardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: ClipboardDirective, selector: \"[ngxClipboard]\", inputs: { targetElm: [\"ngxClipboard\", \"targetElm\"], container: \"container\", cbContent: \"cbContent\", cbSuccessMsg: \"cbSuccessMsg\" }, outputs: { cbOnSuccess: \"cbOnSuccess\", cbOnError: \"cbOnError\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngxClipboard]' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: ClipboardService }]; }, propDecorators: { targetElm: [{\n                type: Input,\n                args: ['ngxClipboard']\n            }], container: [{\n                type: Input\n            }], cbContent: [{\n                type: Input\n            }], cbSuccessMsg: [{\n                type: Input\n            }], cbOnSuccess: [{\n                type: Output\n            }], cbOnError: [{\n                type: Output\n            }] } });\n\nclass ClipboardIfSupportedDirective {\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\n        this._clipboardService = _clipboardService;\n        this._viewContainerRef = _viewContainerRef;\n        this._templateRef = _templateRef;\n    }\n    ngOnInit() {\n        if (this._clipboardService.isSupported) {\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\n        }\n    }\n}\nClipboardIfSupportedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardIfSupportedDirective, deps: [{ token: ClipboardService }, { token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nClipboardIfSupportedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: ClipboardIfSupportedDirective, selector: \"[ngxClipboardIfSupported]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardIfSupportedDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxClipboardIfSupported]'\n                }]\n        }], ctorParameters: function () { return [{ type: ClipboardService }, { type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; } });\n\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, declarations: [ClipboardDirective, ClipboardIfSupportedDirective], imports: [CommonModule], exports: [ClipboardDirective, ClipboardIfSupportedDirective] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n                    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-clipboard\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n"]},"metadata":{},"sourceType":"module"}